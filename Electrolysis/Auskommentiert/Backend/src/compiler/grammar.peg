start := comment=Comment _ $

Comment := WhileComment | ManipulationComment | AssignmentComment | IfComment | FunctionCall
_ := ' '*

WhileComment := 'while' _ whileExpression=Expression ':'

ManipulationComment := base=ManipulationCommentBase _ self={'including' _ 'self'}?
ManipulationCommentBase := ManipulationCommentSwap | ManipulationCommentMove | ManipulationCommentRotate
ManipulationCommentSwap := 'swap' _ target=CommentSelector
ManipulationCommentMove := 'move' _ target=CommentSelector
ManipulationCommentRotate := 'rotate' _ target=CommentSelector _ rotateDir={'downwards' | 'upwards'}
CommentSelector := count='[0-9]+' _ 'comments' _ dir={'above' | 'below'}

IfComment := 'if' _ condition=Expression _ ':'

AssignmentComment := varName=VarName _ 'is' _ rhsExpr=Expression

VarName := '[a-zA-Z]+[0-9a-zA-Z]*'
Expression := ComparisionExpression

ComparisionExpression := LessThanExpression | MoreThanExpression | LessEqualExpression | MoreEqualExpression | LineExpression
LessThanExpression := lhs=ComparisionExpression _ '<' _ rhs=LineExpression
MoreThanExpression := lhs=ComparisionExpression _ '>' _ rhs=LineExpression
LessEqualExpression := lhs=ComparisionExpression _ '<=' _ rhs=LineExpression
MoreEqualExpression := lhs=ComparisionExpression _ '>=' _ rhs=LineExpression

LineExpression := AddExpression | SubExpression | DotExpression
AddExpression :=  lhs=LineExpression _ '\+' _ rhs=DotExpression
SubExpression :=  lhs=LineExpression _ '\-' _ rhs=DotExpression

DotExpression := MulExpression | DivExpression | PostfixExpression
MulExpression := lhs=DotExpression _ '\*' _ rhs=PostfixExpression
DivExpression := lhs=DotExpression _ '\/' _ rhs=PostfixExpression

PostfixExpression := FunctionCall | AtomicExpression

FunctionParameters := value=Expression _ next={',' _ nextParam=FunctionParameters}?
FunctionCall := funcName=AtomicExpression _ '\(' _ params=FunctionParameters? _ '\)'

AtomicExpression := value='true' | value='false' | varName=VarName | num='[0-9]+'